# ========================================
# CALCULADORA DE CARBONO - VERS√ÉO ATUALIZADA COM INTERFACE GR√ÅFICA
# ========================================

#fun√ß√£o principal para interface gr√°fica "TKinter"
import tkinter as tk
from tkinter import ttk, messagebox, filedialog

# --- Fun√ß√µes de c√°lculo ---------------------------------------------------

def emissao_combustivel(litros):
    """Emiss√£o por combust√£o (kg CO2) assumindo 2.31 kgCO2 por litro."""
    return litros * 2.31

def emissao_viagem_veiculo(km, tipo):
    """Emiss√£o direta por km do ve√≠culo (kg CO2 / km * km = kg CO2)"""
    fatores = {
        "carro": 0.15,   # kg CO2 por km
        "moto": 0.10,
        "avi√£o": 0.25,
        "barco": 0.20
    }
    return km * fatores.get(tipo, 0)

# --- Fun√ß√µes auxiliares ---------------------------------------------------

def calcular():
    try:
        km = float(entry_km.get())
        consumo_km_l = float(entry_consumo.get())  # km por litro
        tipo = vehicle_var.get()
        modo = modo_var.get()

        if km <= 0 or consumo_km_l <= 0:
            raise ValueError("Valores devem ser positivos.")

        # litros gastos na viagem
        litros_totais = km / consumo_km_l
        emis_combustivel = emissao_combustivel(litros_totais)
        emis_veiculo = emissao_viagem_veiculo(km, tipo)

        # Consumo de energia
        if modo == "pers":
            if tipo == "carro":
                media_energia = km * 0.67
            elif tipo == "moto":
                media_energia = km * 0.33
            elif tipo == "avi√£o":
                passageiros = int(spin_passageiros.get())
                passageiros = max(1, passageiros)
                media_energia = km * 0.33 * passageiros
            elif tipo == "barco":
                media_energia = km * 4.8
            else:
                media_energia = 0.0
        else:
            media_energia = litros_totais * 9.5

        emis_energia = media_energia * 0.233
        total = emis_combustivel + emis_veiculo + emis_energia

        preco_credito = 50.0  # R$ por tonelada
        toneladas = total / 1000.0
        custo = toneladas * preco_credito

        # Atualiza os resultados
        lbl_result_combustivel.config(
            text=f"Emiss√£o por combust√≠vel: {emis_combustivel:.2f} kg CO‚ÇÇ")
        lbl_result_veiculo.config(
            text=f"Emiss√£o pelo ve√≠culo: {emis_veiculo:.2f} kg CO‚ÇÇ")
        lbl_result_energia.config(
            text=f"Emiss√£o por energia el√©trica: {emis_energia:.2f} kg CO‚ÇÇ")
        lbl_result_total.config(
            text=f"TOTAL: {total:.2f} kg CO‚ÇÇ ({toneladas:.3f} tCO‚ÇÇ)")
        lbl_result_creditos.config(
            text=f"Cr√©ditos necess√°rios: {toneladas:.3f} tCO‚ÇÇ ‚Äî Custo estimado: R$ {custo:.2f}")

        global resultados_atual
        resultados_atual = {
            "Dist√¢ncia (km)": km,
            "Consumo (km/L)": consumo_km_l,
            "Ve√≠culo": tipo,
            "Combust√≠vel (kg CO‚ÇÇ)": emis_combustivel,
            "Ve√≠culo (kg CO‚ÇÇ)": emis_veiculo,
            "Energia (kg CO‚ÇÇ)": emis_energia,
            "Total (kg CO‚ÇÇ)": total,
            "Total (tCO‚ÇÇ)": toneladas,
            "Custo (R$)": custo
        }

    except ValueError:
        messagebox.showerror("Erro", "Digite apenas n√∫meros v√°lidos e positivos.")
    except Exception as e:
        messagebox.showerror("Erro inesperado", str(e))

def limpar():
    entry_km.delete(0, tk.END)
    entry_consumo.delete(0, tk.END)
    vehicle_var.set("carro")
    modo_var.set("p")
    spin_passageiros.set(1)
    lbl_result_combustivel.config(text="Emiss√£o por combust√≠vel: -")
    lbl_result_veiculo.config(text="Emiss√£o pelo ve√≠culo: -")
    lbl_result_energia.config(text="Emiss√£o por energia el√©trica: -")
    lbl_result_total.config(text="TOTAL: -")
    lbl_result_creditos.config(text="Cr√©ditos: -")

def exportar():
    if not resultados_atual:
        messagebox.showinfo("Aviso", "Nenhum c√°lculo realizado ainda.")
        return

    filepath = filedialog.asksaveasfilename(
        defaultextension=".txt", filetypes=[("Arquivo de texto", "*.txt")])
    if not filepath:
        return

    with open(filepath, "w", encoding="utf-8") as f:
        f.write("=== Relat√≥rio da Calculadora de Carbono ===\n\n")
        for chave, valor in resultados_atual.items():
            f.write(f"{chave}: {valor}\n")

    messagebox.showinfo("Exporta√ß√£o conclu√≠da", f"Resultados salvos em:\n{filepath}")

def atualizar_passageiros(*args):
    if vehicle_var.get() == "avi√£o":
        lbl_passageiros.grid()
        spin_passageiros.grid()
    else:
        lbl_passageiros.grid_remove()
        spin_passageiros.grid_remove()

def toggle_fullscreen(event=None):
    root.attributes("-fullscreen", not root.attributes("-fullscreen"))

def end_fullscreen(event=None):
    root.attributes("-fullscreen", False)

# --- Interface gr√°fica ----------------------------------------------------

root = tk.Tk()
root.title("Calculadora de Carbono")
root.geometry("620x540")
root.configure(bg="#f0f8ff")  # azul claro no fundo

# Atalhos para fullscreen
root.bind("<F11>", toggle_fullscreen)
root.bind("<Escape>", end_fullscreen)

frame = tk.Frame(root, bg="#f0f8ff")
frame.pack(fill="both", expand=True, padx=15, pady=15)

font_label = ("Arial", 11)

# T√≠tulo
tk.Label(frame, text="üå± Calculadora de Emiss√µes de Carbono üåç",
         font=("Arial", 18, "bold"), bg="#f0f8ff", fg="#006400").grid(row=0, column=0, columnspan=3, pady=(0, 15))

# Dist√¢ncia
tk.Label(frame, text="Dist√¢ncia percorrida (km):", font=font_label, bg="#f0f8ff").grid(row=1, column=0, sticky="w")
entry_km = ttk.Entry(frame)
entry_km.grid(row=1, column=1, sticky="ew", padx=6, pady=4)

# Consumo
tk.Label(frame, text="Consumo (km por litro):", font=font_label, bg="#f0f8ff").grid(row=2, column=0, sticky="w")
entry_consumo = ttk.Entry(frame)
entry_consumo.grid(row=2, column=1, sticky="ew", padx=6, pady=4)

# Tipo de ve√≠culo
tk.Label(frame, text="Tipo de ve√≠culo:", font=font_label, bg="#f0f8ff").grid(row=3, column=0, sticky="w")
vehicle_var = tk.StringVar(value="carro")
vehicle_combo = ttk.Combobox(frame, textvariable=vehicle_var, state="readonly",
                             values=["carro", "moto", "avi√£o", "barco"])
vehicle_combo.grid(row=3, column=1, sticky="ew", padx=6, pady=4)
vehicle_var.trace_add("write", atualizar_passageiros)

# Consumo de energia
tk.Label(frame, text="Consumo de energia:", font=font_label, bg="#f0f8ff").grid(row=4, column=0, sticky="w")
modo_var = tk.StringVar(value="p")
tk.Radiobutton(frame, text="Padr√£o (gen√©rico)", variable=modo_var, value="p",
               bg="#f0f8ff").grid(row=4, column=1, sticky="w")
tk.Radiobutton(frame, text="Personalizado (por ve√≠culo)", variable=modo_var, value="pers",
               bg="#f0f8ff").grid(row=5, column=1, sticky="w")

# Passageiros (avi√£o)
lbl_passageiros = tk.Label(frame, text="N√∫mero de passageiros (avi√£o):", font=font_label, bg="#f0f8ff")
spin_passageiros = ttk.Spinbox(frame, from_=1, to=500, width=6)
spin_passageiros.set(1)
lbl_passageiros.grid(row=6, column=0, sticky="w")
spin_passageiros.grid(row=6, column=1, sticky="w")
atualizar_passageiros()

# Bot√µes coloridos
btn_calc = tk.Button(frame, text="Calcular", command=calcular,
                     bg="#32cd32", fg="white", font=("Arial", 11, "bold"))
btn_calc.grid(row=7, column=0, pady=10, sticky="ew")

btn_clear = tk.Button(frame, text="Limpar", command=limpar,
                      bg="#ff4500", fg="white", font=("Arial", 11, "bold"))
btn_clear.grid(row=7, column=1, pady=10, sticky="ew")

btn_export = tk.Button(frame, text="Exportar", command=exportar,
                       bg="#1e90ff", fg="white", font=("Arial", 11, "bold"))
btn_export.grid(row=7, column=2, pady=10, sticky="ew")

# Resultados
tk.Label(frame, text="Resultados:", font=("Arial", 13, "bold"),
         bg="#f0f8ff", fg="#000080").grid(row=8, column=0, columnspan=3, sticky="w", pady=(10, 5))

lbl_result_combustivel = tk.Label(frame, text="Emiss√£o por combust√≠vel: -", font=font_label, bg="#f0f8ff")
lbl_result_combustivel.grid(row=9, column=0, columnspan=3, sticky="w")

lbl_result_veiculo = tk.Label(frame, text="Emiss√£o pelo ve√≠culo: -", font=font_label, bg="#f0f8ff")
lbl_result_veiculo.grid(row=10, column=0, columnspan=3, sticky="w")

lbl_result_energia = tk.Label(frame, text="Emiss√£o por energia el√©trica: -", font=font_label, bg="#f0f8ff")
lbl_result_energia.grid(row=11, column=0, columnspan=3, sticky="w")

lbl_result_total = tk.Label(frame, text="TOTAL: -", font=("Arial", 12, "bold"), bg="#f0f8ff", fg="#8b0000")
lbl_result_total.grid(row=12, column=0, columnspan=3, sticky="w")

lbl_result_creditos = tk.Label(frame, text="Cr√©ditos: -", font=font_label, bg="#f0f8ff")
lbl_result_creditos.grid(row=13, column=0, columnspan=3, sticky="w")

frame.columnconfigure(1, weight=1)

# Vari√°vel global para exportar resultados
resultados_atual = {}

#fun√ß√£o essencial para finalizar a interface gr√°fica
root.mainloop()
